/**
 * API para Gera√ß√£o de PDFs - Endpoint Unificado
 * 
 * Este arquivo centraliza toda a gera√ß√£o de PDFs da aplica√ß√£o.
 * Suporta diferentes tipos de relat√≥rios com templates espec√≠ficos.
 * 
 * Tipos suportados:
 * - mutirao: Relat√≥rios de mutir√£o (individual ou consolidado)
 * - registro: Registros fotogr√°ficos (acumulador, desfazimento, etc.)
 * - evidencias: Evid√™ncias fotogr√°ficas
 * - unified: Relat√≥rios unificados (revitaliza√ß√£o, etc.)
 * 
 * NOVA IMPLEMENTA√á√ÉO: Usando jsPDF + html2canvas para melhor compatibilidade com servidores
 */

import { NextRequest, NextResponse } from 'next/server';

// Importa√ß√µes dos geradores de PDF espec√≠ficos (Puppeteer - mantidos para compatibilidade)
import { exportMutiraoPdf, exportRegistroPdf } from '@/lib/pdf/mutirao-modern';
import { exportEvidenciasPdf } from '@/lib/pdf/evidencias-modern';
import { exportUnifiedPdf } from '@/lib/pdf/relatorios-modern';
import { generateMonumentosHTML } from '@/lib/pdf/monumentos-modern';
import { exportEvidenciasRotineirosPdf } from '@/lib/pdf/rotineiros-modern';

// IMPLEMENTA√á√ÉO SEM PUPPETEER: Usar jsPDF (funciona no servidor)
import { 
  generateMutiraoJSPDF, 
  generateEvidenciasJSPDF, 
  generateRotineirosJSPDF, 
  generateMonumentosJSPDF 
} from '@/lib/pdf-generator-jspdf-server';

// Importa√ß√µes para gera√ß√£o de nomes de arquivos
import { generateFileName, generateConsolidatedFileName } from '@/lib/filename-generator';

// Configura√ß√£o centralizada do Puppeteer (mantida para fallback)
import { generatePDFFromHTML } from '@/lib/puppeteer-config';

// Tipos TypeScript
import type { MutiraoRelatorio, RegistroRelatorio, ReportSummary, Relatorio, MonumentosRelatorio, RotineirosRelatorio } from '@/lib/types';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { tipo, dados, consolidated, useJSPDF = true } = body;

    console.log('üìä PDF Request:', { tipo, dados: dados?.tipoServico, consolidated, useJSPDF });

    // Valida√ß√£o b√°sica
    if (!tipo || !dados) {
      console.error('‚ùå Valida√ß√£o falhou:', { tipo, dados: !!dados });
      return NextResponse.json({ error: 'Tipo e dados s√£o obrigat√≥rios' }, { status: 400 });
    }

    let pdfBuffer: Buffer | Uint8Array;
    let fileName: string;

    // ========================================
    // ROTEAMENTO POR TIPO DE RELAT√ìRIO
    // ========================================

    // IMPLEMENTA√á√ÉO SEM PUPPETEER: Usar jsPDF (funciona no servidor)
    console.log('üöÄ Usando jsPDF (sem Puppeteer)...');
    
    // Verificar se os dados est√£o corretos
    console.log('üìä Dados recebidos:', JSON.stringify(dados, null, 2));
    
    if (!dados || typeof dados !== 'object') {
      console.error('‚ùå Dados inv√°lidos:', dados);
      return NextResponse.json({ error: 'Dados do relat√≥rio inv√°lidos' }, { status: 400 });
    }
    
    switch (tipo) {
      case 'mutirao':
        console.log('üîÑ Processando mutir√£o...');
        // Verificar se tem os campos necess√°rios
        if (!dados.tipoServico || !dados.data) {
          console.error('‚ùå Dados do mutir√£o incompletos:', dados);
          return NextResponse.json({ error: 'Dados do mutir√£o incompletos' }, { status: 400 });
        }
        
        pdfBuffer = await generateMutiraoJSPDF(dados as MutiraoRelatorio);
        fileName = consolidated 
          ? generateConsolidatedFileName(dados.data)
          : generateFileName(dados as MutiraoRelatorio);
        break;

      case 'evidencias':
        console.log('üîÑ Processando evid√™ncias...', dados.tipoServico);
        // Verificar se tem os campos necess√°rios
        if (!dados.tipoServico || (!dados.data && !dados.dataInicio)) {
          console.error('‚ùå Dados das evid√™ncias incompletos:', dados);
          return NextResponse.json({ error: 'Dados das evid√™ncias incompletos' }, { status: 400 });
        }
        
        pdfBuffer = await generateEvidenciasJSPDF(dados as Relatorio);
        fileName = generateFileName(dados as Relatorio);
        break;

      case 'rotineiros':
        console.log('üîÑ Processando servi√ßos rotineiros...');
        // Verificar se tem os campos necess√°rios
        if (!dados.data) {
          console.error('‚ùå Dados dos rotineiros incompletos:', dados);
          return NextResponse.json({ error: 'Dados dos rotineiros incompletos' }, { status: 400 });
        }
        
        const dataFormatada = new Date(dados.data).toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' });
        pdfBuffer = await generateRotineirosJSPDF(dataFormatada, [dados as RotineirosRelatorio]);
        fileName = generateFileName(dados as RotineirosRelatorio);
        break;

      case 'monumentos':
        console.log('üîÑ Processando monumentos...');
        // Verificar se tem os campos necess√°rios
        if (!dados.tipoServico || !dados.data) {
          console.error('‚ùå Dados dos monumentos incompletos:', dados);
          return NextResponse.json({ error: 'Dados dos monumentos incompletos' }, { status: 400 });
        }
        
        pdfBuffer = await generateMonumentosJSPDF(dados as MonumentosRelatorio);
        fileName = generateFileName(dados as MonumentosRelatorio);
        break;

      case 'registro':
      case 'unified':
        console.log(`üîÑ Processando ${tipo}...`);
        // Verificar se tem os campos necess√°rios
        if (!dados.tipoServico || (!dados.data && !dados.dataInicio)) {
          console.error(`‚ùå Dados do ${tipo} incompletos:`, dados);
          return NextResponse.json({ error: `Dados do ${tipo} incompletos` }, { status: 400 });
        }
        
        // Para tipos que ainda n√£o t√™m vers√£o jsPDF espec√≠fica, usar evid√™ncias
        pdfBuffer = await generateEvidenciasJSPDF(dados as Relatorio);
        fileName = generateFileName(dados as Relatorio);
        break;

      default:
        console.error('‚ùå Tipo inv√°lido:', tipo);
        return NextResponse.json({ error: 'Tipo de relat√≥rio inv√°lido' }, { status: 400 });
    }

    // ========================================
    // RESPOSTA COM PDF GERADO
    // ========================================

    return new NextResponse(new Uint8Array(pdfBuffer), {
      status: 200,
      headers: {
        'Content-Type': 'application/pdf',
        // Usa UTF-8 encoding para suportar caracteres especiais nos nomes
        'Content-Disposition': `attachment; filename*=UTF-8''${encodeURIComponent(fileName)}.pdf`,
      },
    });

  } catch (error) {
    console.error('‚ùå Erro ao gerar PDF:', error);
    console.error('‚ùå Stack trace:', error instanceof Error ? error.stack : 'No stack trace');
    return NextResponse.json(
      { error: 'Erro interno do servidor ao gerar PDF', details: error instanceof Error ? error.message : String(error) },
      { status: 500 }
    );
  }
}
